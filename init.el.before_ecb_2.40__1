;; =============================
;; autocomplete and yasnippet
;; =============================
;; yasnippet
(add-to-list 'load-path
	                   "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
;; To use YASnippet as a non-global minor mode, replace (yas-global-mode 1) 
;; with (yas-reload-all) to load the snippet tables. Then add a call to 
;; (yas-minor-mode) to the major-modes where you to enable YASnippet.
;; (add-hook 'prog-mode-hook
;;           '(lambda ()
;;              (yas-minor-mode)))


;; auto-complete
(add-to-list 'load-path
              "~/.emacs.d/plugins/popup-el")
(require 'popup)

(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete/")
(require 'auto-complete-config)
(ac-config-default)
(setq ac-auto-show-menu 0.3)
(auto-complete-mode)

(setq ac-modes
      (append ac-modes '(org-mode 
                         text-mode)))


;; =============================
;; el-get
;; =============================
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil t)
  (url-retrieve
   "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
   (lambda (s)
     (let (el-get-master-branch)
       (goto-char (point-max))
       (eval-print-last-sexp)))))

(el-get 'sync)


;; =============================
;; others
;; =============================
(require 'ido)
(ido-mode t)

(require 'ecb)
(setq stack-trace-on-error t)
(setq ecb-layout-name 'left3)
;; (ecb-activate)

;; =============================
;; Ruby and Rails
;; =============================

;; rvm
(require 'rvm)
;; (rvm-use-default)
(rvm-use "ruby-1.9.3-p0" "rails3") 

(require 'haml-mode)
(require 'sass-mode)
(require 'feature-mode)
(require 'rspec-mode)
(require 'coffee-mode)

;; Rinari
(add-to-list 'load-path "~/.emacs.d/plugins/rinari")
(require 'rinari)

;; Files Types

;;coffee
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))

;;rails
(add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))

;; Yaml
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))

(require 'color-theme)
(color-theme-railscasts)



;; org-mode
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cb" 'org-iswitchb)

(setq org-log-done 'time)
;; (setq org-log-done 'note)
(setq org-startup-indented t)

;; iimage mode
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)

;; (setq org-agenda-files (list "~/gtd/work.org"
;;                              "~/gtd/study.org" 
;;                              "~/gtd/home.org"))

 
;; redo+
(require 'redo+)
(global-set-key (kbd "C-?") 'redo)



;; =============================
;; misc
;; =============================
(setq visible-bell t)
(setq ring-bell-function 'ignore)
(setq inhibit-startup-message t)
(setq column-number-mode t) 
(setq kill-ring-max 200)
(setq default-fill-column 60)
(setq-default indent-tabs-mode nil)
(setq default-tab-width 8)
(setq scroll-margin 3
      scroll-conservatively 10000)
(set-scroll-bar-mode nil)
(mouse-wheel-mode t)
(setq auto-fill-mode nil)
(add-hook 'org-mode-hook
          (lambda () (setq truncate-lines nil)))
(setq default-major-mode 'text-mode)
(show-paren-mode t)
(setq show-paren-style 'parentheses)
(mouse-avoidance-mode 'animate)
(setq frame-title-format "%n%F/%b")
(auto-image-file-mode)
(global-font-lock-mode t)
(setq user-full-name "hongqing.chen")
(setq user-mail-address "hongqing.chen at gmail.com")

(setq make-backup-files nil)
(setq auto-save-default nil)
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(fset 'yes-or-no-p 'y-or-n-p)

(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)

(display-time-mode t)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-use-mail-icon t)
(display-time)

;;设置 sentence-end 可以识别中文标点
(setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
(setq sentence-end-double-space nil) 













;;-------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40")
 '(org-agenda-files (quote ("~/Org-mode.org" "~/gtd/work.org" "~/gtd/study.org" "~/gtd/home.org"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
